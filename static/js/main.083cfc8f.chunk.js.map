{"version":3,"sources":["sounds/sound_failure.mp3","sounds/sound_success.mp3","images/question-mark.png","images/close-mark.png","components/Form/Form.js","components/Help/Help.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","sendForm","RandomVerbs","check","skip","error","className","onSubmit","e","disabled","onClick","Help","showHelp","setShowHelp","src","closeMarkImg","alt","questionMarkImg","title","App","useState","randomVerb","setRandomVerb","randomWord","setRandomWord","text","setText","setError","generateSet","random","Math","floor","ListOfIrregularVerbs","length","useEffect","playSound","audio","Audio","currentTime","play","map","x","type","key","autoFocus","value","onChange","target","join","preventDefault","includes","toLowerCase","goodSound","setTimeout","baddSound","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.083cfc8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound_failure.7768c1d0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound_success.dcbb5b43.mp3\";","module.exports = __webpack_public_path__ + \"static/media/question-mark.6207b3dc.png\";","module.exports = __webpack_public_path__ + \"static/media/close-mark.e2148c85.png\";","import React from \"react\";\n\nconst Form = ({ sendForm, RandomVerbs, check, skip, error }) => (\n  <form\n    className={`Form ${error ? \"error\" : \"\"}`}\n    onSubmit={(e) => sendForm(e)}\n  >\n    <div className=\"input\">{RandomVerbs}</div>\n\n    <div className=\"buttons\">\n      <button className=\"check\" disabled={error} onClick={() => check()}>\n        Check\n      </button>\n      <button className=\"skip\" disabled={error} onClick={() => skip()}>\n        Skip\n      </button>\n    </div>\n  </form>\n);\n\nexport default Form;\n","import React from \"react\";\n\nimport questionMarkImg from \"../../images/question-mark.png\";\nimport closeMarkImg from \"../../images/close-mark.png\";\n\nconst Help = ({ showHelp, setShowHelp }) => (\n  <div className=\"Help\">\n    <div className={`content ${showHelp ? \"active\" : \"\"}`}>\n      <p>This app will help you master irregular verbs.</p>\n      <p>\n        Just type missing word and click 'check' and the app will indicate if\n        the choosen word was correct. If you are not sure you can click a 'skip'\n        button and you'll get a correct answer\n      </p>\n      <p>Have fun!</p>\n      <img\n        src={closeMarkImg}\n        alt=\"\"\n        className=\"close\"\n        onClick={() => setShowHelp(false)}\n      />\n    </div>\n    <img\n      className={`question-mark ${showHelp ? \"active\" : \"\"}`}\n      src={questionMarkImg}\n      alt=\"\"\n      title=\"Help\"\n      onClick={() => setShowHelp(!showHelp)}\n    />\n  </div>\n);\n\nexport default Help;\n","import React, { useState, useEffect } from \"react\";\n\nimport ListOfIrregularVerbs from \"./data/IrregularVerbs.json\";\n\nimport goodSound from \"./sounds/sound_success.mp3\";\nimport baddSound from \"./sounds/sound_failure.mp3\";\n\nimport \"./scss/main.css\";\n\nimport Form from \"./components/Form/Form\";\nimport Help from \"./components/Help/Help\";\n\nconst App = () => {\n  const [randomVerb, setRandomVerb] = useState(\"\");\n  const [randomWord, setRandomWord] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [showHelp, setShowHelp] = useState(false);\n  const [error, setError] = useState(false);\n\n  const sendForm = (e) => e.preventDefault();\n\n  const generateSet = () => {\n    const random = Math.floor(Math.random() * ListOfIrregularVerbs.length);\n    const randomVerb = ListOfIrregularVerbs[random];\n    const randomWord = Math.floor(Math.random() * 3);\n    setRandomVerb(randomVerb);\n    setRandomWord(randomWord);\n    setText(\"\");\n  };\n\n  useEffect(() => {\n    generateSet();\n  }, []);\n\n  const playSound = (src) => {\n    const audio = new Audio(src);\n    audio.currentTime = 0;\n    audio.play();\n  };\n\n  const check = () => {\n    if (randomVerb[randomWord].includes(text.toLowerCase())) {\n      generateSet();\n      playSound(goodSound);\n    } else {\n      setError(true);\n      setText(randomVerb[randomWord]);\n      setTimeout(() => {\n        generateSet();\n        setError(false);\n      }, 4000);\n      playSound(baddSound);\n    }\n  };\n\n  const skip = () => {\n    setError(true);\n    setText(randomVerb[randomWord]);\n    setTimeout(() => {\n      generateSet();\n      setError(false);\n    }, 4000);\n    playSound(baddSound);\n  };\n\n  const RandomVerbs = [0, 1, 2, 3].map((x) =>\n    randomWord === x ? (\n      <input\n        type=\"text\"\n        className={error ? \"error\" : \"\"}\n        key={x}\n        autoFocus\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n    ) : (\n      <span key={x}>{(randomVerb[x] || []).join(', ')}</span>\n    )\n  );\n\n  return (\n    <div className=\"App\">\n      <Form\n        sendForm={sendForm}\n        RandomVerbs={RandomVerbs}\n        check={check}\n        skip={skip}\n        error={error}\n      />\n      <Help showHelp={showHelp} setShowHelp={setShowHelp} />\n\n      {/* Features to implement\n\n        write game instructions\n        mobile test\n      */}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}